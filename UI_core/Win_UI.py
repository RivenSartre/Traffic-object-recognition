# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Win_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_mainWindow(object):
	def setupUi(self, mainWindow):
		mainWindow.setObjectName("mainWindow")
		mainWindow.resize(1204, 682)
		mainWindow.setMouseTracking(True)
		icon = QtGui.QIcon()
		icon.addPixmap(QtGui.QPixmap(":/other/Other/数据探索.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		mainWindow.setWindowIcon(icon)
		mainWindow.setStyleSheet("#mainWindow{border:none;}")
		self.centralwidget = QtWidgets.QWidget(mainWindow)
		self.centralwidget.setObjectName("centralwidget")
		self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
		self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout_2.setSpacing(0)
		self.verticalLayout_2.setObjectName("verticalLayout_2")
		self.groupBox_18 = QtWidgets.QGroupBox(self.centralwidget)
		self.groupBox_18.setStyleSheet("#groupBox_18{border-image: url(:/other/Other/background.jpg);\n"
"border: 0px solid #42adff;\n"
"border-radius:5px;}")
		self.groupBox_18.setTitle("")
		self.groupBox_18.setObjectName("groupBox_18")
		self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_18)
		self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout_6.setSpacing(0)
		self.verticalLayout_6.setObjectName("verticalLayout_6")
		self.groupBox = QtWidgets.QGroupBox(self.groupBox_18)
		self.groupBox.setMinimumSize(QtCore.QSize(0, 45))
		self.groupBox.setMaximumSize(QtCore.QSize(16777215, 45))
		self.groupBox.setStyleSheet("#groupBox{\n"
"background-color: rgba(95,158,160,1);\n"
"border: 0px solid #42adff;\n"
"border-left: 0px solid rgba(29, 83, 185, 255);\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
";\n"
"border-radius:0px;}")
		self.groupBox.setTitle("")
		self.groupBox.setObjectName("groupBox")
		self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox)
		self.horizontalLayout.setContentsMargins(-1, 0, -1, 0)
		self.horizontalLayout.setSpacing(0)
		self.horizontalLayout.setObjectName("horizontalLayout")
		self.label_7 = QtWidgets.QLabel(self.groupBox)
		self.label_7.setMinimumSize(QtCore.QSize(40, 40))
		self.label_7.setMaximumSize(QtCore.QSize(40, 40))
		self.label_7.setStyleSheet("image: url(:/other/Other/数据探索.png);")
		self.label_7.setText("")
		self.label_7.setObjectName("label_7")
		self.horizontalLayout.addWidget(self.label_7)
		self.label_4 = QtWidgets.QLabel(self.groupBox)
		self.label_4.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 24px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.label_4.setObjectName("label_4")
		self.horizontalLayout.addWidget(self.label_4)
		spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout.addItem(spacerItem)
		self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_5.setSpacing(0)
		self.horizontalLayout_5.setObjectName("horizontalLayout_5")
		self.minButton = QtWidgets.QPushButton(self.groupBox)
		self.minButton.setMinimumSize(QtCore.QSize(50, 28))
		self.minButton.setMaximumSize(QtCore.QSize(50, 28))
		self.minButton.setStyleSheet("QPushButton {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
		self.minButton.setText("")
		icon1 = QtGui.QIcon()
		icon1.addPixmap(QtGui.QPixmap(":/other/Other/最小化.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		self.minButton.setIcon(icon1)
		self.minButton.setObjectName("minButton")
		self.horizontalLayout_5.addWidget(self.minButton)
		self.maxButton = QtWidgets.QPushButton(self.groupBox)
		self.maxButton.setMinimumSize(QtCore.QSize(50, 28))
		self.maxButton.setMaximumSize(QtCore.QSize(50, 28))
		self.maxButton.setStyleSheet("QPushButton {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
		self.maxButton.setText("")
		icon2 = QtGui.QIcon()
		icon2.addPixmap(QtGui.QPixmap(":/other/Other/正方形.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		icon2.addPixmap(QtGui.QPixmap(":/other/Other/还原.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
		icon2.addPixmap(QtGui.QPixmap(":/other/Other/还原.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
		self.maxButton.setIcon(icon2)
		self.maxButton.setCheckable(True)
		self.maxButton.setObjectName("maxButton")
		self.horizontalLayout_5.addWidget(self.maxButton)
		self.closeButton = QtWidgets.QPushButton(self.groupBox)
		self.closeButton.setMinimumSize(QtCore.QSize(50, 28))
		self.closeButton.setMaximumSize(QtCore.QSize(50, 28))
		self.closeButton.setStyleSheet("QPushButton {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
		self.closeButton.setText("")
		icon3 = QtGui.QIcon()
		icon3.addPixmap(QtGui.QPixmap(":/other/Other/关闭.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		self.closeButton.setIcon(icon3)
		self.closeButton.setObjectName("closeButton")
		self.horizontalLayout_5.addWidget(self.closeButton)
		self.horizontalLayout.addLayout(self.horizontalLayout_5)
		self.verticalLayout_6.addWidget(self.groupBox)
		self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_7.setSpacing(0)
		self.horizontalLayout_7.setObjectName("horizontalLayout_7")
		self.groupBox_8 = QtWidgets.QGroupBox(self.groupBox_18)
		self.groupBox_8.setMinimumSize(QtCore.QSize(320, 0))
		self.groupBox_8.setMaximumSize(QtCore.QSize(320, 16777215))
		self.groupBox_8.setStyleSheet("#groupBox_8{\n"
"background-color: rgba(95,158,160,1);\n"
"border: 0px solid #42adff;\n"
"border-radius:0px;}\n"
"")
		self.groupBox_8.setTitle("")
		self.groupBox_8.setObjectName("groupBox_8")
		self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_8)
		self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout_8.setSpacing(11)
		self.verticalLayout_8.setObjectName("verticalLayout_8")
		self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox_8)
		self.groupBox_2.setMinimumSize(QtCore.QSize(0, 42))
		self.groupBox_2.setMaximumSize(QtCore.QSize(16777215, 42))
		self.groupBox_2.setStyleSheet("#groupBox_2{\n"
"border: 0px solid #42adff;\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
		self.groupBox_2.setTitle("")
		self.groupBox_2.setObjectName("groupBox_2")
		self.horizontalLayout_35 = QtWidgets.QHBoxLayout(self.groupBox_2)
		self.horizontalLayout_35.setContentsMargins(11, 0, 11, 0)
		self.horizontalLayout_35.setObjectName("horizontalLayout_35")
		self.label_5 = QtWidgets.QLabel(self.groupBox_2)
		self.label_5.setMinimumSize(QtCore.QSize(0, 0))
		self.label_5.setMaximumSize(QtCore.QSize(16777215, 40))
		self.label_5.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 22px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"\n"
"}\n"
"")
		self.label_5.setObjectName("label_5")
		self.horizontalLayout_35.addWidget(self.label_5)
		spacerItem1 = QtWidgets.QSpacerItem(37, 39, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_35.addItem(spacerItem1)
		self.verticalLayout_8.addWidget(self.groupBox_2)
		self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_2.setContentsMargins(11, -1, 11, -1)
		self.horizontalLayout_2.setObjectName("horizontalLayout_2")
		self.label_3 = QtWidgets.QLabel(self.groupBox_8)
		self.label_3.setMinimumSize(QtCore.QSize(0, 28))
		self.label_3.setMaximumSize(QtCore.QSize(80, 16777215))
		self.label_3.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.label_3.setObjectName("label_3")
		self.horizontalLayout_2.addWidget(self.label_3)
		self.comboBox = QtWidgets.QComboBox(self.groupBox_8)
		self.comboBox.setMinimumSize(QtCore.QSize(0, 28))
		self.comboBox.setStyleSheet("QComboBox QAbstractItemView {\n"
"font-family: \"Microsoft YaHei\";\n"
"font-size: 16px;\n"
"background:rgba(200, 200, 200,150);\n"
"selection-background-color: rgba(200, 200, 200,50);\n"
"color: rgb(218, 218, 218);\n"
"outline:none;\n"
"border:none;}\n"
"QComboBox{\n"
"font-family: \"Microsoft YaHei\";\n"
"font-size: 16px;\n"
"color: rgb(218, 218, 218);\n"
"border-width:0px;\n"
"border-color:white;\n"
"border-style:solid;\n"
"background-color: rgba(200, 200, 200,0);}\n"
"\n"
"QComboBox::drop-down {\n"
"margin-top:8;\n"
"height:20;\n"
"background:rgba(255,255,255,0);\n"
"border-image: url(:/other/Other/下拉_白色.png);\n"
"}\n"
"")
		self.comboBox.setObjectName("comboBox")
		self.comboBox.addItem("")
		self.comboBox.addItem("")
		self.comboBox.addItem("")
		self.comboBox.addItem("")
		self.horizontalLayout_2.addWidget(self.comboBox)
		self.verticalLayout_8.addLayout(self.horizontalLayout_2)
		self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_9.setContentsMargins(11, -1, 0, -1)
		self.horizontalLayout_9.setObjectName("horizontalLayout_9")
		self.label_10 = QtWidgets.QLabel(self.groupBox_8)
		self.label_10.setMaximumSize(QtCore.QSize(80, 16777215))
		self.label_10.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.label_10.setObjectName("label_10")
		self.horizontalLayout_9.addWidget(self.label_10)
		self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_11.setObjectName("horizontalLayout_11")
		self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_8)
		self.groupBox_5.setStyleSheet("#groupBox_5{\n"
"background-color: rgba(48,148,243,0);\n"
"border: 0px solid #42adff;\n"
"border-left: 0px solid #d9d9d9;\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-radius:0px;}")
		self.groupBox_5.setTitle("")
		self.groupBox_5.setObjectName("groupBox_5")
		self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.groupBox_5)
		self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
		self.horizontalLayout_8.setObjectName("horizontalLayout_8")
		self.fileButton = QtWidgets.QPushButton(self.groupBox_5)
		self.fileButton.setMinimumSize(QtCore.QSize(55, 28))
		self.fileButton.setMaximumSize(QtCore.QSize(16777215, 28))
		self.fileButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
"    image: url(:/other/Other/打开.png);\n"
"font-size: 14px;\n"
"font-weight: bold;\n"
"color:white;\n"
"text-align: center center;\n"
"padding-left: 5px;\n"
"padding-right: 5px;\n"
"padding-top: 4px;\n"
"padding-bottom: 4px;\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-color: rgba(255, 255, 255, 255);\n"
"border-radius: 3px;\n"
"background-color: rgba(200, 200, 200,0);}\n"
"\n"
"QPushButton:focus{outline: none;}\n"
"\n"
"QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"\n"
"QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(48,148,243,80);}")
		self.fileButton.setText("")
		icon4 = QtGui.QIcon()
		icon4.addPixmap(QtGui.QPixmap(":/other/Other/打开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		self.fileButton.setIcon(icon4)
		self.fileButton.setObjectName("fileButton")
		self.horizontalLayout_8.addWidget(self.fileButton)
		self.cameraButton = QtWidgets.QPushButton(self.groupBox_5)
		self.cameraButton.setMinimumSize(QtCore.QSize(55, 28))
		self.cameraButton.setMaximumSize(QtCore.QSize(16777215, 28))
		self.cameraButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
"image: url(:/other/Other/摄像头开.png);\n"
"font-size: 14px;\n"
"font-weight: bold;\n"
"color:white;\n"
"text-align: center center;\n"
"padding-left: 5px;\n"
"padding-right: 5px;\n"
"padding-top: 4px;\n"
"padding-bottom: 4px;\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-color: rgba(255, 255, 255, 255);\n"
"border-radius: 3px;\n"
"background-color: rgba(48,148,243,0);}\n"
"\n"
"QPushButton:focus{outline: none;}\n"
"\n"
"QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"\n"
"QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(48,148,243,80);}")
		self.cameraButton.setText("")
		icon5 = QtGui.QIcon()
		icon5.addPixmap(QtGui.QPixmap(":/other/Other/摄像头开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		self.cameraButton.setIcon(icon5)
		self.cameraButton.setObjectName("cameraButton")
		self.horizontalLayout_8.addWidget(self.cameraButton)
		self.horizontalLayout_11.addWidget(self.groupBox_5)
		self.horizontalLayout_9.addLayout(self.horizontalLayout_11)
		self.verticalLayout_8.addLayout(self.horizontalLayout_9)
		self.verticalLayout_3 = QtWidgets.QVBoxLayout()
		self.verticalLayout_3.setContentsMargins(11, -1, 11, -1)
		self.verticalLayout_3.setSpacing(4)
		self.verticalLayout_3.setObjectName("verticalLayout_3")
		self.label_2 = QtWidgets.QLabel(self.groupBox_8)
		self.label_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.label_2.setObjectName("label_2")
		self.verticalLayout_3.addWidget(self.label_2)
		self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_4.setSpacing(5)
		self.horizontalLayout_4.setObjectName("horizontalLayout_4")
		self.iouSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_8)
		self.iouSpinBox.setMinimumSize(QtCore.QSize(50, 0))
		self.iouSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
		self.iouSpinBox.setStyleSheet("QDoubleSpinBox{\n"
"background:rgba(200, 200, 200,50);\n"
"color:white;\n"
"font-size: 14px;\n"
"font-family: \"Microsoft YaHei UI\";\n"
"border-style: solid;\n"
"border-width: 1px;\n"
"border-color: rgba(200, 200, 200,100);\n"
"border-radius: 3px;}\n"
"\n"
"QDoubleSpinBox::down-button{\n"
"background:rgba(200, 200, 200,0);\n"
"border-image: url(:/other/Other/箭头_列表展开.png);}\n"
"QDoubleSpinBox::down-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/other/Other/箭头_列表展开.png);}\n"
"\n"
"QDoubleSpinBox::up-button{\n"
"background:rgba(200, 200, 200,0);\n"
"border-image: url(:/other/Other/箭头_列表收起.png);}\n"
"QDoubleSpinBox::up-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/other/Other/箭头_列表收起.png);}\n"
"")
		self.iouSpinBox.setMaximum(1.0)
		self.iouSpinBox.setSingleStep(0.01)
		self.iouSpinBox.setProperty("value", 0.45)
		self.iouSpinBox.setObjectName("iouSpinBox")
		self.horizontalLayout_4.addWidget(self.iouSpinBox)
		self.iouSlider = QtWidgets.QSlider(self.groupBox_8)
		self.iouSlider.setStyleSheet("QSlider{\n"
"border-color: #bcbcbc;\n"
"color:#d9d9d9;\n"
"}\n"
"QSlider::groove:horizontal {                                \n"
"     border: 1px solid #999999;                             \n"
"     height: 3px;                                           \n"
"    margin: 0px 0;                                         \n"
"     left: 5px; right: 5px; \n"
" }\n"
"QSlider::handle:horizontal {                               \n"
"     border: 0px ; \n"
"     \n"
"    border-image: url(:/other/Other/圆.png);\n"
"     width:15px;\n"
"     margin: -7px -7px -7px -7px;                  \n"
"} \n"
"QSlider::add-page:horizontal{\n"
"background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9); \n"
"\n"
"}\n"
"QSlider::sub-page:horizontal{                               \n"
" background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);                     \n"
"}")
		self.iouSlider.setMaximum(100)
		self.iouSlider.setProperty("value", 45)
		self.iouSlider.setOrientation(QtCore.Qt.Horizontal)
		self.iouSlider.setObjectName("iouSlider")
		self.horizontalLayout_4.addWidget(self.iouSlider)
		self.verticalLayout_3.addLayout(self.horizontalLayout_4)
		self.verticalLayout_8.addLayout(self.verticalLayout_3)
		self.verticalLayout = QtWidgets.QVBoxLayout()
		self.verticalLayout.setContentsMargins(11, -1, 11, -1)
		self.verticalLayout.setSpacing(4)
		self.verticalLayout.setObjectName("verticalLayout")
		self.label = QtWidgets.QLabel(self.groupBox_8)
		self.label.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.label.setObjectName("label")
		self.verticalLayout.addWidget(self.label)
		self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_3.setSpacing(5)
		self.horizontalLayout_3.setObjectName("horizontalLayout_3")
		self.confSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_8)
		self.confSpinBox.setMinimumSize(QtCore.QSize(50, 0))
		self.confSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
		self.confSpinBox.setFocusPolicy(QtCore.Qt.ClickFocus)
		self.confSpinBox.setStyleSheet("QDoubleSpinBox{\n"
"background:rgba(200, 200, 200,50);\n"
"color:white;\n"
"font-size: 14px;\n"
"font-family: \"Microsoft YaHei UI\";\n"
"border-style: solid;\n"
"border-width: 1px;\n"
"border-color: rgba(200, 200, 200,100);\n"
"border-radius: 3px;}\n"
"\n"
"QDoubleSpinBox::down-button{\n"
"background:rgba(200, 200, 200,0);\n"
"border-image: url(:/other/Other/箭头_列表展开.png);}\n"
"QDoubleSpinBox::down-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/other/Other/箭头_列表展开.png);}\n"
"\n"
"QDoubleSpinBox::up-button{\n"
"background:rgba(200, 200, 200,0);\n"
"border-image: url(:/other/Other/箭头_列表收起.png);}\n"
"QDoubleSpinBox::up-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/other/Other/箭头_列表收起.png);}\n"
"")
		self.confSpinBox.setMaximum(1.0)
		self.confSpinBox.setSingleStep(0.01)
		self.confSpinBox.setProperty("value", 0.45)
		self.confSpinBox.setObjectName("confSpinBox")
		self.horizontalLayout_3.addWidget(self.confSpinBox)
		self.confSlider = QtWidgets.QSlider(self.groupBox_8)
		self.confSlider.setStyleSheet("QSlider{\n"
"border-color: #bcbcbc;\n"
"color:#d9d9d9;\n"
"}\n"
"QSlider::groove:horizontal {                                \n"
"     border: 1px solid #999999;                             \n"
"     height: 3px;                                           \n"
"    margin: 0px 0;                                         \n"
"     left: 5px; right: 5px; \n"
" }\n"
"QSlider::handle:horizontal {                               \n"
"     border: 0px ; \n"
"     \n"
"    border-image: url(:/other/Other/圆.png);\n"
"     width:15px;\n"
"     margin: -7px -7px -7px -7px;                  \n"
"} \n"
"QSlider::add-page:horizontal{\n"
"background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9); \n"
"\n"
"}\n"
"QSlider::sub-page:horizontal{                               \n"
" background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);                     \n"
"}")
		self.confSlider.setMaximum(100)
		self.confSlider.setProperty("value", 45)
		self.confSlider.setOrientation(QtCore.Qt.Horizontal)
		self.confSlider.setTickPosition(QtWidgets.QSlider.NoTicks)
		self.confSlider.setObjectName("confSlider")
		self.horizontalLayout_3.addWidget(self.confSlider)
		self.verticalLayout.addLayout(self.horizontalLayout_3)
		self.verticalLayout_8.addLayout(self.verticalLayout)
		self.Hide_label_CheckBox = QtWidgets.QCheckBox(self.groupBox_8)
		self.Hide_label_CheckBox.setStyleSheet("\n"
"QCheckBox\n"
"{font-size: 16px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);;}\n"
"\n"
"QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"QCheckBox::indicator:unchecked {\n"
"    image: url(:/other/Other/button-off.png);\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"    image: url(:/other/Other/button-on.png);\n"
"}\n"
"")
		self.Hide_label_CheckBox.setChecked(True)
		self.Hide_label_CheckBox.setObjectName("Hide_label_CheckBox")
		self.verticalLayout_8.addWidget(self.Hide_label_CheckBox)
		self.Hide_conf_CheckBox = QtWidgets.QCheckBox(self.groupBox_8)
		self.Hide_conf_CheckBox.setStyleSheet("\n"
"QCheckBox\n"
"{font-size: 16px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);;}\n"
"\n"
"QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"QCheckBox::indicator:unchecked {\n"
"    image: url(:/other/Other/button-off.png);\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"    \n"
"    image: url(:/other/Other/button-on.png);\n"
"}\n"
"")
		self.Hide_conf_CheckBox.setChecked(True)
		self.Hide_conf_CheckBox.setObjectName("Hide_conf_CheckBox")
		self.verticalLayout_8.addWidget(self.Hide_conf_CheckBox)
		self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_13.setObjectName("horizontalLayout_13")
		self.verticalLayout_8.addLayout(self.horizontalLayout_13)
		self.verticalLayout_7 = QtWidgets.QVBoxLayout()
		self.verticalLayout_7.setContentsMargins(-1, 0, -1, 0)
		self.verticalLayout_7.setObjectName("verticalLayout_7")
		self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_8)
		self.groupBox_9.setMinimumSize(QtCore.QSize(0, 42))
		self.groupBox_9.setMaximumSize(QtCore.QSize(16777215, 42))
		self.groupBox_9.setStyleSheet("#groupBox_9{\n"
"border: 0px solid #42adff;\n"
"border-top: 1px solid rgba(200, 200, 200,100);\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
		self.groupBox_9.setTitle("")
		self.groupBox_9.setObjectName("groupBox_9")
		self.horizontalLayout_38 = QtWidgets.QHBoxLayout(self.groupBox_9)
		self.horizontalLayout_38.setContentsMargins(11, 0, 11, 0)
		self.horizontalLayout_38.setObjectName("horizontalLayout_38")
		self.label_11 = QtWidgets.QLabel(self.groupBox_9)
		self.label_11.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 22px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.label_11.setObjectName("label_11")
		self.horizontalLayout_38.addWidget(self.label_11)
		spacerItem2 = QtWidgets.QSpacerItem(37, 39, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_38.addItem(spacerItem2)
		self.verticalLayout_7.addWidget(self.groupBox_9)
		self.groupBox_10 = QtWidgets.QGroupBox(self.groupBox_8)
		self.groupBox_10.setMinimumSize(QtCore.QSize(0, 42))
		self.groupBox_10.setMaximumSize(QtCore.QSize(16777215, 16777215))
		self.groupBox_10.setStyleSheet("#groupBox_10{\n"
"border: 0px solid #42adff;\n"
"\n"
"border-radius:0px;}")
		self.groupBox_10.setTitle("")
		self.groupBox_10.setObjectName("groupBox_10")
		self.horizontalLayout_39 = QtWidgets.QHBoxLayout(self.groupBox_10)
		self.horizontalLayout_39.setContentsMargins(11, 0, 11, 0)
		self.horizontalLayout_39.setObjectName("horizontalLayout_39")
		self.resultWidget = QtWidgets.QListWidget(self.groupBox_10)
		self.resultWidget.setStyleSheet("QListWidget{\n"
"background-color: rgba(12, 28, 77, 0);\n"
"\n"
"border-radius:0px;\n"
"font-family: \"Microsoft YaHei\";\n"
"font-size: 16px;\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.resultWidget.setObjectName("resultWidget")
		self.horizontalLayout_39.addWidget(self.resultWidget)
		self.verticalLayout_7.addWidget(self.groupBox_10)
		self.verticalLayout_7.setStretch(1, 1)
		self.verticalLayout_8.addLayout(self.verticalLayout_7)
		self.horizontalLayout_7.addWidget(self.groupBox_8)
		self.groupBox_201 = QtWidgets.QGroupBox(self.groupBox_18)
		self.groupBox_201.setStyleSheet("#groupBox_201{\n"
"background-color: rgba(95,158,160,1);\n"
"border: 0px solid #42adff;\n"
"border-left: 1px solid rgba(200, 200, 200,100);\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-radius:0px;}")
		self.groupBox_201.setTitle("")
		self.groupBox_201.setObjectName("groupBox_201")
		self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_201)
		self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
		self.verticalLayout_4.setObjectName("verticalLayout_4")
		self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_201)
		self.groupBox_3.setMinimumSize(QtCore.QSize(0, 42))
		self.groupBox_3.setMaximumSize(QtCore.QSize(16777215, 42))
		self.groupBox_3.setStyleSheet("#groupBox_3{\n"
"border: 0px solid #42adff;\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
		self.groupBox_3.setTitle("")
		self.groupBox_3.setObjectName("groupBox_3")
		self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox_3)
		self.horizontalLayout_6.setContentsMargins(11, 0, 11, 0)
		self.horizontalLayout_6.setObjectName("horizontalLayout_6")
		self.label_6 = QtWidgets.QLabel(self.groupBox_3)
		self.label_6.setMinimumSize(QtCore.QSize(0, 0))
		self.label_6.setMaximumSize(QtCore.QSize(16777215, 40))
		self.label_6.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 22px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.label_6.setObjectName("label_6")
		self.horizontalLayout_6.addWidget(self.label_6)
		spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
		self.horizontalLayout_6.addItem(spacerItem3)
		self.fps_label = QtWidgets.QLabel(self.groupBox_3)
		self.fps_label.setMinimumSize(QtCore.QSize(100, 40))
		self.fps_label.setMaximumSize(QtCore.QSize(100, 40))
		self.fps_label.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 20px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.fps_label.setText("")
		self.fps_label.setAlignment(QtCore.Qt.AlignCenter)
		self.fps_label.setObjectName("fps_label")
		self.horizontalLayout_6.addWidget(self.fps_label)
		self.verticalLayout_4.addWidget(self.groupBox_3)
		self.splitter = QtWidgets.QSplitter(self.groupBox_201)
		self.splitter.setEnabled(True)
		self.splitter.setStyleSheet("#splitter::handle{background: 1px solid  rgba(200, 200, 200,100);}")
		self.splitter.setFrameShape(QtWidgets.QFrame.NoFrame)
		self.splitter.setLineWidth(10)
		self.splitter.setOrientation(QtCore.Qt.Horizontal)
		self.splitter.setHandleWidth(1)
		self.splitter.setObjectName("splitter")
		self.raw_video = Label_click_Mouse(self.splitter)
		self.raw_video.setEnabled(True)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.raw_video.sizePolicy().hasHeightForWidth())
		self.raw_video.setSizePolicy(sizePolicy)
		self.raw_video.setMinimumSize(QtCore.QSize(200, 0))
		font = QtGui.QFont()
		font.setFamily("微软雅黑")
		font.setPointSize(36)
		self.raw_video.setFont(font)
		self.raw_video.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
		self.raw_video.setStyleSheet("color: rgb(218, 218, 218);\n"
"")
		self.raw_video.setText("")
		self.raw_video.setScaledContents(False)
		self.raw_video.setAlignment(QtCore.Qt.AlignCenter)
		self.raw_video.setObjectName("raw_video")
		self.out_video = Label_click_Mouse(self.splitter)
		self.out_video.setEnabled(True)
		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.out_video.sizePolicy().hasHeightForWidth())
		self.out_video.setSizePolicy(sizePolicy)
		self.out_video.setMinimumSize(QtCore.QSize(200, 0))
		font = QtGui.QFont()
		font.setFamily("微软雅黑")
		font.setPointSize(36)
		self.out_video.setFont(font)
		self.out_video.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
		self.out_video.setStyleSheet("color: rgb(218, 218, 218);\n"
"")
		self.out_video.setText("")
		self.out_video.setScaledContents(False)
		self.out_video.setAlignment(QtCore.Qt.AlignCenter)
		self.out_video.setObjectName("out_video")
		self.verticalLayout_4.addWidget(self.splitter)
		self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
		self.horizontalLayout_12.setContentsMargins(11, -1, 11, -1)
		self.horizontalLayout_12.setObjectName("horizontalLayout_12")
		self.runButton = QtWidgets.QPushButton(self.groupBox_201)
		self.runButton.setMinimumSize(QtCore.QSize(40, 40))
		self.runButton.setStyleSheet("QPushButton {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);\n"
"}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
		self.runButton.setText("")
		icon6 = QtGui.QIcon()
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/运行.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/暂停.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/运行.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/暂停.png"), QtGui.QIcon.Disabled, QtGui.QIcon.On)
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/运行.png"), QtGui.QIcon.Active, QtGui.QIcon.Off)
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/暂停.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/运行.png"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
		icon6.addPixmap(QtGui.QPixmap(":/other/Other/暂停.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
		self.runButton.setIcon(icon6)
		self.runButton.setIconSize(QtCore.QSize(30, 30))
		self.runButton.setCheckable(True)
		self.runButton.setObjectName("runButton")
		self.horizontalLayout_12.addWidget(self.runButton)
		self.progressBar = QtWidgets.QProgressBar(self.groupBox_201)
		self.progressBar.setMaximumSize(QtCore.QSize(16777215, 5))
		self.progressBar.setStyleSheet("QProgressBar{ color: rgb(255, 255, 255); font:12pt; border-radius:2px; text-align:center; border:none; background-color: rgba(215, 215, 215,100);} \n"
"QProgressBar:chunk{ border-radius:0px; background: rgba(55, 55, 55, 200);}")
		self.progressBar.setMaximum(1000)
		self.progressBar.setProperty("value", 0)
		self.progressBar.setTextVisible(False)
		self.progressBar.setObjectName("progressBar")
		self.horizontalLayout_12.addWidget(self.progressBar)
		self.stopButton = QtWidgets.QPushButton(self.groupBox_201)
		self.stopButton.setMinimumSize(QtCore.QSize(40, 40))
		self.stopButton.setStyleSheet("QPushButton {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);\n"
"}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
		self.stopButton.setText("")
		icon7 = QtGui.QIcon()
		icon7.addPixmap(QtGui.QPixmap(":/other/Other/终止.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		self.stopButton.setIcon(icon7)
		self.stopButton.setIconSize(QtCore.QSize(30, 30))
		self.stopButton.setObjectName("stopButton")
		self.horizontalLayout_12.addWidget(self.stopButton)
		self.verticalLayout_4.addLayout(self.horizontalLayout_12)
		self.verticalLayout_4.setStretch(1, 1)
		self.horizontalLayout_7.addWidget(self.groupBox_201)
		self.verticalLayout_6.addLayout(self.horizontalLayout_7)
		self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_18)
		self.groupBox_4.setMinimumSize(QtCore.QSize(0, 30))
		self.groupBox_4.setMaximumSize(QtCore.QSize(16777215, 30))
		self.groupBox_4.setStyleSheet("#groupBox_4{\n"
"background-color: rgba(95,158,160,1);\n"
"border: 0px solid #42adff;\n"
"border-left: 0px solid rgba(29, 83, 185, 255);\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-top: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
		self.groupBox_4.setTitle("")
		self.groupBox_4.setObjectName("groupBox_4")
		self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.groupBox_4)
		self.horizontalLayout_10.setContentsMargins(-1, 0, -1, 0)
		self.horizontalLayout_10.setSpacing(0)
		self.horizontalLayout_10.setObjectName("horizontalLayout_10")
		self.statistic_label = QtWidgets.QLabel(self.groupBox_4)
		self.statistic_label.setMouseTracking(False)
		self.statistic_label.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 16px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: light;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
		self.statistic_label.setText("")
		self.statistic_label.setObjectName("statistic_label")
		self.horizontalLayout_10.addWidget(self.statistic_label)
		self.verticalLayout_6.addWidget(self.groupBox_4)
		self.verticalLayout_2.addWidget(self.groupBox_18)
		mainWindow.setCentralWidget(self.centralwidget)

		self.retranslateUi(mainWindow)
		self.comboBox.setCurrentIndex(2)
		QtCore.QMetaObject.connectSlotsByName(mainWindow)

	def retranslateUi(self, mainWindow):
		_translate = QtCore.QCoreApplication.translate
		mainWindow.setWindowTitle(_translate("mainWindow", "YOLOv5检测界面"))
		self.label_4.setText(_translate("mainWindow", "  基于YOLOV5的交通场景检测"))
		self.label_5.setText(_translate("mainWindow", "setting"))
		self.label_3.setText(_translate("mainWindow", "model"))
		self.comboBox.setCurrentText(_translate("mainWindow", "yolov5l"))
		self.comboBox.setItemText(0, _translate("mainWindow", "yolov5s"))
		self.comboBox.setItemText(1, _translate("mainWindow", "yolov5l"))
		self.comboBox.setItemText(2, _translate("mainWindow", "yolov5x"))
		self.label_10.setText(_translate("mainWindow", "input"))
		self.fileButton.setToolTip(_translate("mainWindow", "file"))
		self.cameraButton.setToolTip(_translate("mainWindow", "camera"))
		self.label_2.setText(_translate("mainWindow", "IoU"))
		self.label.setText(_translate("mainWindow", "conf"))
		self.Hide_label_CheckBox.setText(_translate("mainWindow", "Hide_label"))
		self.Hide_conf_CheckBox.setText(_translate("mainWindow", "Hide_conf"))
		self.label_11.setText(_translate("mainWindow", "result statistics"))
		self.label_6.setText(_translate("mainWindow", "view"))
from MouseLabel import Label_click_Mouse
from tools.Tools import Tools,scale_boxes
from tools.Timer import Timer
import numpy as np
from MouseLabel import Label_click_Mouse
from UI_core import images_rc

from PyQt5.QtCore import  QThread, pyqtSignal
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QFileDialog
import torch
from core.Plotter import Plotter,Colors
import yaml
from core.DataLoader import DataLoder,ImgReshape
import copy
import cv2
import json
import os
from math import *


class PreThread(QThread):
	send_img = pyqtSignal(np.ndarray)
	send_raw = pyqtSignal(np.ndarray)
	send_statistic = pyqtSignal(dict)
	send_msg = pyqtSignal(str)
	send_percent = pyqtSignal(int)
	send_fps = pyqtSignal(str)

	def __init__(self):
		super(PreThread, self).__init__()
		weights_l_path = './weights/yolov5l.pt'
		weights_s_path = './weights/yolov5s.pt'
		weights_x_path = './weights/yolov5x.pt'
		self.models_yolov5s = torch.load(weights_s_path, map_location='cuda:0')
		self.models_yolov5l = torch.load(weights_l_path, map_location='cuda:0')
		self.models_yolov5x = torch.load(weights_x_path, map_location='cuda:0')
		self.models_yolov5s = self.models_yolov5s['model'].to(torch.device('cuda:0')).float()
		self.models_yolov5l = self.models_yolov5l['model'].to(torch.device('cuda:0')).float()
		self.models_yolov5x = self.models_yolov5x['model'].to(torch.device('cuda:0')).float()

		if not hasattr(self.models_yolov5s, 'stride'):
			self.models_yolov5s.stride = torch.tensor([32.])
		if not hasattr(self.models_yolov5l, 'stride'):
			self.models_yolov5l.stride = torch.tensor([32.])
		if not hasattr(self.models_yolov5x, 'stride'):
			self.models_yolov5x.stride = torch.tensor([32.])
		self.models_yolov5s.fuse().eval() if hasattr(self.models_yolov5s, 'fuse') else self.models_yolov5s.eval()
		self.models_yolov5l.fuse().eval() if hasattr(self.models_yolov5l, 'fuse') else self.models_yolov5l.eval()
		self.models_yolov5x.fuse().eval() if hasattr(self.models_yolov5x, 'fuse') else self.models_yolov5x.eval()
		self.PreTimer = Timer()
		self.InfeTimer = Timer()
		self.NMSTimer = Timer()
		from core.NMS import NMS
		self.NMS = NMS()
		self.Tools = Tools()
		self.path = ''
		self.stride = 1
		self.model = 'yolov5l'
		self.conf_thres = 0.45
		self.iou_thres = 0.45
		self.hide_labels = False
		self.hide_conf = False
		self.Run_flag = False
		with open('./data/models_data/BDD100K.yaml','r',encoding='utf-8') as f:
			self.labels = yaml.safe_load(f)['names']
		self.colors = Colors()
		self.RunFlag = True
		self.FileChangeFlag = False
		self.ShowFineshFlag = False
		self.CameraFlag = False
		self.Camera = None
		self.StartFlag = False
	def run(self):
		img_count = 0
		while True:
			if self.StartFlag:
				if not self.CameraFlag:
					if not self.ShowFineshFlag:
						dataset = DataLoder(self.path,self.stride)
						count = 0
						for img,img0 in dataset:
							while not self.RunFlag:
								pass
							count+=1
							# if (count == floor(dataset.frames/3)) or (count == floor(dataset.frames/3)*2) or (count == floor(dataset.frames/3)*3) or (count == 2):
							# 	self.RunFlag = False
							if self.FileChangeFlag:
								self.FileChangeFlag = False
								break
							if self.CameraFlag:
								break
							with self.PreTimer:
								img = torch.from_numpy(img).to(torch.device('cuda:0')).float()
								img /= 255
								if len(img.shape) == 3:
									img = img[None]
							with self.InfeTimer:
								if self.model == 'yolov5l':
									pred = self.models_yolov5l(img)
								elif self.model == 'yolov5s':
									pred = self.models_yolov5s(img)
								elif self.model == 'yolov5x':
									pred = self.models_yolov5x(img)
							with self.NMSTimer:
								pred = self.NMS.NMSFunc(pred, self.conf_thres, self.iou_thres)
							img0s = copy.deepcopy(img0)
							PLOTTER = Plotter(img0, 3)
							det = pred[0]
							dict_temp = {}
							if len(det):
								det[:, :4] = scale_boxes(img.shape[2:], det[:, :4], img0.shape[:2]).round()
								for c in det[:, 5].unique():
									n = (det[:, 5] == c).sum()  # detections per class
									dict_temp[self.labels[int(c)]] = int(n)
								for *xyxy, conf, cls in det:
									c = int(cls)
									if self.hide_labels and self.hide_conf:
										label = None
									elif self.hide_labels:
										label = f'{conf:.2f}'
									elif self.hide_conf:
										label = f'{self.labels[c]}'
									else:
										label = f'{self.labels[c]} {conf:.2f}'
									PLOTTER.box_label(xyxy, label, color=self.colors(c, True))
							img0 = PLOTTER.result()
							self.send_img.emit(img0)
							self.send_raw.emit(img0s if isinstance(img0s, np.ndarray) else img0s[0])
							# if (count == floor(dataset.frames / 3)) or (count == floor(dataset.frames / 3) * 2) or (count == floor(dataset.frames / 3) * 3) or (count == 2):
							# 	cv2.imwrite(f'./result/{img_count}raw.jpg',img0s if isinstance(img0s, np.ndarray) else img0s[0])
							# 	cv2.imwrite(f'./result/{img_count}img.jpg',img0)
							# 	img_count+=1
							self.send_statistic.emit(dict_temp)
							fps =  1 /(self.PreTimer.dt + self.NMSTimer.dt + self.InfeTimer.dt)
							fps = round(fps,3)
							fps = f'fps:{fps}'
							self.send_fps.emit(fps)
							percent = int(round(dataset.frame/dataset.frames,3) * 1000)
							self.send_percent.emit(percent)
							if count == dataset.frames:
								self.ShowFineshFlag = True
				else:
					self.Camera = cv2.VideoCapture(0)
					while True:
						while not self.RunFlag:
							pass
						if not self.CameraFlag:
							self.Camera.release()
							self.Camera = None
							break
						ret, img0 = self.Camera.read()
						img0 = cv2.flip(img0, 1)
						img = ImgReshape(img0)[0]  # padded resize
						img = img.transpose((2, 0, 1))[::-1]  # HWC to CHW, BGR to RGB
						img = np.ascontiguousarray(img)
						while not self.RunFlag:
							pass
						with self.PreTimer:
							img = torch.from_numpy(img).to(torch.device('cuda:0')).float()
							img /= 255
							if len(img.shape) == 3:
								img = img[None]
						with self.InfeTimer:
							if self.model == 'yolov5l':
								pred = self.models_yolov5l(img)
							elif self.model == 'yolov5s':
								pred = self.models_yolov5s(img)
							elif self.model == 'yolov5x':
								pred = self.models_yolov5x(img)
						with self.NMSTimer:
							pred = self.NMS.NMSFunc(pred, self.conf_thres, self.iou_thres)
						img0s = copy.deepcopy(img0)
						PLOTTER = Plotter(img0, 3)
						det = pred[0]
						dict_temp = {}
						if len(det):
							det[:, :4] = scale_boxes(img.shape[2:], det[:, :4], img0.shape[:2]).round()
							for c in det[:, 5].unique():
								n = (det[:, 5] == c).sum()  # detections per class
								dict_temp[self.labels[int(c)]] = n
							for *xyxy, conf, cls in det:
								c = int(cls)
								label = None if self.hide_labels else (
									self.labels[c] if self.hide_conf else f'{self.labels[c]} {conf:.2f}')
								PLOTTER.box_label(xyxy, label, color=self.colors(c, True))
						img0 = PLOTTER.result()
						self.send_img.emit(img0)
						self.send_raw.emit(img0s if isinstance(img0s, np.ndarray) else img0s[0])
						self.send_statistic.emit(dict_temp)
						fps =  1 /(self.PreTimer.dt + self.NMSTimer.dt + self.InfeTimer.dt)
						fps = round(fps, 3)
						fps = f'fps:{fps}'
						self.send_fps.emit(fps)
						self.send_fps.emit(fps)
						self.send_percent.emit(1000)

class UI_Win(QtWidgets.QMainWindow):
	def __init__(self, parent=None):
		super().__init__(parent)
		self.ui = Ui_mainWindow()
		self.ui.setupUi(self)
		self.det = PreThread()

	def show_statistic(self, statistic_dic):
		try:
			self.ui.resultWidget.clear()
			statistic_dic = sorted(statistic_dic.items(), key=lambda x: x[1], reverse=True)
			statistic_dic = [i for i in statistic_dic if i[1] > 0]
			results = [' ' + str(i[0]) + '：' + str(i[1]) for i in statistic_dic]
			self.ui.resultWidget.addItems(results)
		except Exception as e:
			print(repr(e))

	@staticmethod
	def show_image(img_src, label):
		try:
			ih, iw, _ = img_src.shape
			w = label.geometry().width()
			h = label.geometry().height()
			# keep original aspect ratio
			if iw / w > ih / h:
				scal = w / iw
				nw = w
				nh = int(scal * ih)
				img_src_ = cv2.resize(img_src, (nw, nh))

			else:
				scal = h / ih
				nw = int(scal * iw)
				nh = h
				img_src_ = cv2.resize(img_src, (nw, nh))

			frame = cv2.cvtColor(img_src_, cv2.COLOR_BGR2RGB)
			img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.shape[2] * frame.shape[1],
						 QImage.Format_RGB888)
			label.setPixmap(QPixmap.fromImage(img))

		except Exception as e:
			print(repr(e))

	def statistic_msg(self, msg):
		self.ui.statistic_label.setText(msg)

	def open_file(self):
		config_file = 'config/fold.json'
		# config = json.load(open(config_file, 'r', encoding='utf-8'))
		config = json.load(open(config_file, 'r', encoding='utf-8'))
		open_fold = config['open_fold']
		if not os.path.exists(open_fold):
			open_fold = os.getcwd()
		name, _ = QFileDialog.getOpenFileName(self, 'Video/image', open_fold, "Pic File(*.mp4 *.mkv *.avi *.flv "
																			  "*.jpg *.png)")
		if name:
			self.det.path = name
			self.statistic_msg('Loaded file：{}'.format(os.path.basename(name)))
			config['open_fold'] = os.path.dirname(name)
			config_json = json.dumps(config, ensure_ascii=False, indent=2)
			with open(config_file, 'w', encoding='utf-8') as f:
				f.write(config_json)
			self.statistic_msg('Loaded file：{}'.format(os.path.basename(name)))
			self.det.FileChangeFlag = True
			self.det.ShowFineshFlag = False
			self.det.CameraFlag = False
			self.det.StartFlag = True
	def CamreaMode(self):
		self.det.ShowFineshFlag = False
		self.det.CameraFlag = True
		self.statistic_msg('Loaded Camera')
		self.det.StartFlag = True
	def stop(self):
		self.det.RunFlag = False
	def run(self):
		self.det.RunFlag = True

	def load_setting(self):
		self.det.model = self.ui.comboBox.currentText()
		self.det.iou_thres = self.ui.iouSpinBox.value()
		self.det.conf_thres = self.ui.confSpinBox.value()
		self.ui.iouSlider.setValue(int(self.det.iou_thres * 100))
		self.ui.confSlider.setValue(int(self.det.conf_thres * 100))
		if self.ui.Hide_conf_CheckBox.isChecked():
			self.det.hide_conf = True
		else:
			self.det.hide_conf = False
		if self.ui.Hide_label_CheckBox.isChecked():
			self.det.hide_labels = True
		else:
			self.det.hide_labels = False
	def SliderChange(self):
		self.ui.iouSpinBox.setValue(self.ui.iouSlider.value()/100)
		self.ui.confSpinBox.setValue(self.ui.confSlider.value()/100)

	def show_msg(self, msg):
		self.statistic_msg(msg)

	def max_or_restore(self):
		if self.ui.maxButton.isChecked():
			self.showMaximized()
		else:
			self.showNormal()
